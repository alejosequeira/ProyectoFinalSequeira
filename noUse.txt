// function validarLargo() {
    
//     const input = document.getElementById("length");
//     const errorMessage = document.getElementById("error-message");

//     if (input.value >= 8 && input.value <= 16) {
//       errorMessage.textContent = "Correcto! Por favor configura tu contraseña de "+input.value+" caracteres...";        
//     } else {
//       errorMessage.textContent = "La contraseña debe tener entre 8 y 16 caracteres, ingresa otro valor.";
//     }
//   }

  



// const footballPlayers= {
//     "team": {
//         "players": [            
//             {
//                 "id": "1",
//                 "name": "Sergio Germán",
//                 "apellido": "Romero",
//                 "edad": 23,
//                 "posicion": "arquero"
//             },
//             {
//                 "id": "2",
//                 "name": "Martín Gastón",
//                 "apellido": "Demichelis",
//                 "edad": 29,
//                 "posicion": "defensor"
//             },
//             {
//                 "id": "3",
//                 "name": "Nicolás Andrés",
//                 "apellido": "Burdisso",
//                 "edad": 29,
//                 "posicion": "defensor"
//             },
//             {
//                 "id": "4",
//                 "name": "Walter Adrián Luján",
//                 "apellido": "Samuel",
//                 "edad": 32,
//                 "posicion": "defensor"
//             },
//             {
//                 "id": "5",
//                 "name": "Gabriel Iván",
//                 "apellido": "Heinze",
//                 "edad": 32,
//                 "posicion": "defensor"
//             },
//             {
//                 "id": "6",
//                 "name": "Maximiliano Rubén",
//                 "apellido": "Rodríguez",
//                 "edad": 29,
//                 "posicion": "mediocampista"
//             },
//             {
//                 "id": "7",
//                 "name": "Javier Alejandro",
//                 "apellido": "Mascherano",
//                 "edad": 26,
//                 "posicion": "mediocampista"
//             },
//             {
//                 "id": "8",
//                 "name": "Ángel Fabián",
//                 "apellido": "Di Maria",
//                 "edad": 22,
//                 "posicion": "mediocampista"
//             },
            
//             {
//                 "id": "9",
//                 "name": "Gonzalo Gerardo",
//                 "apellido": "Higuaín",
//                 "edad": 22,
//                 "posicion": "delantero"
//             },
//             {
//                 "id": "10",
//                 "name": "Lionel Andres",
//                 "apellido": "Messi",
//                 "edad": 22,
//                 "posicion": "delantero"
//             },
//             {
//                 "id": "11",
//                 "name": "Carlos Alberto", 
//                 "apellido": "Tévez",
//                 "edad": 26,
//                 "posicion": "delantero"
//             },
//         ]
//     }
// }

// let numPlayers= prompt("Seleccion futbol 2010: ingrese un n° o una posición para descubrirlos ! ")
// // if(parseInt(numPlayers)>11 || parseInt(numPlayers)
// // console.log(parseInt(numPlayers)!=numPlayers)
// // console.log(footballPlayers.team.players.posicion[0])


// if(parseInt(numPlayers)!=numPlayers){
// while((numPlayers!=="arquero" && numPlayers!=="defensor" && numPlayers!=="mediocampista" && numPlayers!=="delantero")){ 
//     numPlayers = prompt('La posición tiene que ser arquero, defensor, mediocampista o delantero')}
    
//     const positionSelected = footballPlayers.team.players.filter((player) => {
//         return player.posicion === numPlayers;
//       });     
      
//         console.log(`Jugadores con la posición '${numPlayers}' son :`);

//         positionSelected.forEach((player) => {
//           console.log(`${player.name} ${player.apellido}`);
//         });

//     const totalAge = positionSelected.reduce((total, player) => {
//             return total + player.edad;
//           }, 0);
        
//           const promPosition = Math.round(totalAge / positionSelected.length);
        
//     alert(`Promedio de edad ${promPosition}`)
// }
// else{ 
//     while(parseInt(numPlayers)>11 || parseInt(numPlayers)<1){ numPlayers = prompt('Ingrese un n° ENTRE 1 y 11, o su posición dentro de la cancha')}
//     let playerSelected= footballPlayers.team.players[numPlayers-1]
//     console.log(`El Jugador elegido es: ${playerSelected.name} ${playerSelected.apellido}`);
//     console.log(`Edad: ${playerSelected.edad}`);
//     console.log(`Posición: ${playerSelected.posicion}`);}





// let numeroValido= validarLargo(numCaracteres)
// const password=[]

// function validarLargo(numCaracteres){
//     if(numCaracteres>=8 && numCaracteres<=16){
//         return true
//     }else{
//         return false
//     }
// }

// while(!numeroValido) {    
// 	numCaracteres = parseInt( prompt('La contraseña debe tener entre 8 y 16 caracteres, ingresa otro valor.') );
// 	numeroValido = validarLargo(numCaracteres)
// }

// // function randomPass(numCaracteres){
// for(let i=1;i<=numCaracteres;i++){
//     let min = 33;
//     let max = 122;
// const randomNumber = Math.floor(Math.random() * (max - min + 1)) + min;
// password.push(String.fromCharCode(randomNumber))
// }
// // String.fromCharCode()
// alert("Su contraseña es: "+password.join(""))
// // }



















const usuarios = JSON.parse(localStorage.getItem("userData")) ?? [];
let currentUser = null;
let autoSaveTimer = null;

// Función para iniciar sesión
function login() {
    const usernameInput = document.getElementById("username").value;
    const passwordInput = document.getElementById("password").value;

    // Verificar si el usuario existe en los datos almacenados
    const foundUser = usuarios.find(user => user.username === usernameInput && user.password === passwordInput);

    if (foundUser) {
        // Usuario válido, mostrar sus notas
        currentUser = foundUser.username;
        showNotes();
    } else {
        // Usuario no válido, mostrar mensaje de error o redirigir
        alert("Credenciales incorrectas. Intente nuevamente.");
    }
}
function showNotes() {
    const loginForm = document.getElementById("loginForm");
    const notesArea = document.getElementById("notesArea");
    const notesList = document.getElementById("notesList");
    const noteInput = document.getElementById("noteInput");

    // Ocultar el formulario de inicio de sesión y mostrar el área de notas
    loginForm.style.display = "none";
    notesArea.style.display = "block";

    // Obtener las notas del usuario actual desde localStorage
    const userNotesList = JSON.parse(localStorage.getItem("userNotes"))[currentUser] ?? [];

    // Mostrar las notas en la lista
    notesList.innerHTML = "";
    userNotesList.forEach((note, index) => {
        const listItem = document.createElement("li");

        // Asignar un identificador único a cada nota basado en su índice
        listItem.setAttribute("data-note-index", index);

        const truncatedNote = note.length > 18 ? note.substring(0, 18) : note;

        const deleteButton = document.createElement("button");
        deleteButton.className = "trash-btn";
        deleteButton.innerHTML = '<i class="fa fa-trash-o"></i>';
        deleteButton.addEventListener("click", () => deleteNote(index)); // Asociar la función de eliminación

        // Agregar un evento clic a cada <li>
        listItem.addEventListener("click", () => {
            // Obtener el identificador único de la nota
            const noteIndex = listItem.getAttribute("data-note-index");

            // Actualizar el título de la nota
            let num = index + 1;
            let subTitle = note.split("\n")[0];
            subTitle = subTitle.length > 80 ? subTitle.substring(0, 80) : subTitle;
            numNote.innerHTML = `Note ${num}- ${subTitle}`;

            // Cuando se hace clic en un <li>, copia su contenido al textarea
            noteInput.value = userNotesList[noteIndex];

            // Actualiza el índice del textarea para rastrear la nota que se está editando
            noteInput.setAttribute("data-editing-index", noteIndex);

        });

        listItem.textContent = truncatedNote;
        listItem.appendChild(deleteButton);
        notesList.appendChild(listItem);
    });
}

function addNote() {
    const newNote = document.getElementById("noteInput").value;
    const editingIndex = noteInput.getAttribute("data-editing-index"); // Obtiene el índice de la nota en edición

    if (newNote !== "") { // Verificar si la nueva nota no está vacía
        // Obtener las notas actuales del usuario desde el almacenamiento local
        const userNotes = JSON.parse(localStorage.getItem("userNotes")) || {};

        // Obtener las notas del usuario actual o crear un arreglo vacío si no existe
        const userNotesList = userNotes[currentUser] || [];

        if (editingIndex !== null) {
            // Si se está editando una nota existente, actualiza esa nota en lugar de agregar una nueva
            userNotesList[editingIndex] = newNote;
        } else {
            // Agregar la nueva nota            
            userNotesList.push(newNote);
        }
        // Actualizar las notas del usuario en el almacenamiento local
        userNotes[currentUser] = userNotesList;
        localStorage.setItem("userNotes", JSON.stringify(userNotes));

        // Actualizar la lista de notas
        showNotes();
        document.getElementById("noteInput").value = ""; // Limpiar el contenido del textarea
        numNote.innerHTML = ""; // Limpiar el número de nota

        // Limpiar la variable de edición
        noteInput.removeAttribute("data-editing-index");
    }
    // Actualizar el título de la nota
    numNote.innerHTML = `NEW NOTE. . .`;
}

// Función para eliminar una nota
function deleteNote(index) {
    if (currentUser !== null) {

        // Obtener las notas del usuario actual desde localStorage
        const userNotesList = JSON.parse(localStorage.getItem("userNotes"))[currentUser] ?? [];

        if (index >= 0 && index < userNotesList.length) {
            // Eliminar la nota en el índice especificado
            userNotesList.splice(index, 1);

            // Actualizar las notas en localStorage
            const userNotes = JSON.parse(localStorage.getItem("userNotes")) ?? {};
            userNotes[currentUser] = userNotesList;
            localStorage.setItem("userNotes", JSON.stringify(userNotes));


            document.getElementById("noteInput").value = "";

            // Limpiar el número de nota
            numNote.innerHTML = "";

            // Actualizar la lista de notas en pantalla después de eliminar la nota
            showNotes();

        }
    }
}


const noteTextArea = document.getElementById("noteInput");

// Escuchar el evento "input" del textarea para detectar cambios
noteInput.addEventListener("input", () => {
    // Obtener el índice de la nota que se está editando
    const editingIndex = noteInput.getAttribute("data-editing-index");
    const userNotesList = JSON.parse(localStorage.getItem("userNotes"))[currentUser] ?? [];

    // Actualizar automáticamente la nota en la lista
    if (editingIndex !== null) {
        userNotesList[editingIndex] = noteInput.value;
        showNotes(); // Vuelve a mostrar las notas para reflejar los cambios
    }
});

// Escuchar el evento "input" del textarea para detectar cambios
noteTextArea.addEventListener("input", () => {
    // Obtener el índice de la nota que se está editando
    const editingIndex = noteTextArea.getAttribute("data-editing-index");

    // Actualizar automáticamente la nota en la lista en tiempo real
    if (editingIndex !== null) {

        const listItem = document.querySelector(`li[data-note-index="${editingIndex}"]`);
        if (listItem) {

            // Actualizar el subTitle en tiempo real
            let num = parseInt(editingIndex) + 1;
            let subTitle = noteTextArea.value.split("\n")[0];
            subTitle = subTitle.length > 80 ? subTitle.substring(0, 80) : subTitle;
            numNote.innerHTML = `Note ${num}- ${subTitle}`;

            const deleteButton = document.createElement("button");
            deleteButton.className = "trash-btn";
            deleteButton.innerHTML = '<i class="fa fa-trash-o"></i>';
            deleteButton.addEventListener("click", () => deleteNote(editingIndex)); // Asociar la función de eliminación


            // Actualizar el contenido del elemento <li> correspondiente
            listItem.textContent = noteTextArea.value.length > 18 ? noteTextArea.value.substring(0, 18) : noteTextArea.value;
            listItem.appendChild(deleteButton);
        }
    }

    // Guardar automáticamente la nota en tiempo real
    saveNote();
});

function saveNote() {
    // Obtener el contenido actual del textarea
    const currentNote = noteTextArea.value;

    // Obtener las notas actuales del usuario desde el almacenamiento local
    const userNotes = JSON.parse(localStorage.getItem("userNotes")) || {};

    // Obtener el índice de la nota que se está editando
    const editingIndex = noteTextArea.getAttribute("data-editing-index");

    // Actualizar la nota actual del usuario solo si hay un índice de edición válido
    if (editingIndex !== null) {
        userNotes[currentUser][editingIndex] = currentNote;
        localStorage.setItem("userNotes", JSON.stringify(userNotes));
    }
}

// Función para cerrar sesión
function logout() {
    currentUser = null;
    // Mostrar el formulario de inicio de sesión y ocultar el área de notas
    document.getElementById("loginForm").style.display = "block";
    document.getElementById("notesArea").style.display = "none";
    // Refresca la página después de un breve retraso
    setTimeout(function () {
        window.location.reload();
    }, 1000);
}

// PARTE DE REGISTRO...

// Función para mostrar el formulario de registro
function showRegistrationForm() {
    // Oculta el botón "Crear cuenta"
    document.getElementById("createAccountButton").style.display = "none";

    // Muestra el formulario de registro
    document.getElementById("registrationForm").style.display = "block";
}

// Función para registrar al usuario
function registerUser() {
    // Obtiene los valores ingresados por el usuario
    const username = document.getElementById("usernameInput").value;
    const password = document.getElementById("passwordInput").value;

    // Crea un nuevo objeto de usuario
    const newUser = { username, password };

    // Agrega el nuevo usuario al array
    usuarios.push(newUser);

    // Almacena los datos actualizados en el almacenamiento local
    localStorage.setItem("userData", JSON.stringify(usuarios));

    // Cierra el formulario de registro
    document.getElementById("registrationForm").style.display = "none";

    // Muestra el mensaje de éxito
    document.getElementById("successMessage").style.display = "block";

    // Refresca la página después de un breve retraso
    setTimeout(function () {
        window.location.reload();
    }, 2000);
}

// Manejador de clic en el botón "Crear cuenta"
document.getElementById("createAccountButton").addEventListener("click", showRegistrationForm);

// Manejador de clic en el botón "Registrarse" dentro del formulario de registro
document.getElementById("registerButton").addEventListener("click", registerUser);







// Variable para rastrear si la cuadrícula está visible o no
let gridVisible = false;

// Función para mostrar u ocultar las notas en la cuadrícula
function toggleNotesGrid() {
    const gridContainer = document.getElementById("gridContainer");

    // Si la cuadrícula está visible, ocúltala; de lo contrario, muéstrala
    if (gridVisible) {
        gridContainer.style.display = "none";
    } else {
        gridContainer.style.display = "grid";
    }

    // Invierte el estado de visibilidad
    gridVisible = !gridVisible;
}

// Asociar la función al mismo botón (asegúrate de tener un botón con el id "showGridButton" en tu HTML)
const showGridButton = document.getElementById("showGridButton");
showGridButton.addEventListener("click", toggleNotesGrid);


// Función para mostrar las notas en la cuadrícula
function showNotesInGrid() {
    const gridContainer = document.getElementById("gridContainer");
    gridContainer.innerHTML = ""; // Limpiar cualquier contenido anterior

    // Obtener las notas del usuario actual desde el almacenamiento local
    const userNotesList = JSON.parse(localStorage.getItem("userNotes"))[currentUser] || [];

    // Iterar a través de las notas y agregarlas a la cuadrícula
    userNotesList.forEach((note, index) => {
        const noteCard = document.createElement("div");
        noteCard.className = "gridCell";        
        
        // Obtener el subTitle (primer línea de la nota)
        let subTitle = note.split("\n")[0];
        subTitle = subTitle.length > 80 ? subTitle.substring(0, 80) : subTitle;

        // Crear el contenido de la tarjeta de nota
        noteCard.innerHTML = `<h3>${subTitle}</h3><p>${note}</p>`;

        gridContainer.appendChild(noteCard);
    });
}

// Asociar la función a un botón (asegúrate de tener un botón con el id "showGridButton" en tu HTML)
document.getElementById("showGridButton").addEventListener("click", showNotesInGrid);
